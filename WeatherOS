<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <title>날씨 정보 앱</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <style>
    .weather-clear { background-color: #fef9c3; }
    .weather-clouds { background-color: #e0e7ff; }
    .weather-rain { background-color: #d1d5db; }
    .weather-snow { background-color: #f0f9ff; }
    .weather-default { background-color: #cbd5e1; }
    #map { height: 250px; border-radius: 0.75rem; }
  </style>
</head>
<body class="min-h-screen flex flex-col items-center justify-center p-4 transition-colors duration-500" id="app">

  <div class="w-full max-w-md bg-white rounded-2xl shadow-xl p-6 space-y-4 text-center">
    <h1 class="text-2xl font-bold">🌦️ 날씨 정보 앱</h1>

    <input id="cityInput" type="text" placeholder="도시 이름 (한글 가능)" class="w-full px-4 py-2 border rounded-md" />
    <button onclick="searchCity()" class="bg-blue-500 text-white px-4 py-2 rounded-md w-full">검색</button>

    <div id="weather" class="space-y-2 mt-4 text-gray-700"></div>

    <div id="savedCities" class="mt-4 text-left space-y-2"></div>

    <div id="map" class="mt-4"></div>
  </div>

  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

  <script>
    const API_KEY = '87362b1762ed0f343516e4d960a2d417';
    let map, marker, currentCity = '', currentCoords = {};

    function initMap(lat, lon) {
      if (!map) {
        map = L.map('map').setView([lat, lon], 10);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);
        marker = L.marker([lat, lon]).addTo(map);
      } else {
        map.setView([lat, lon], 10);
        if (marker) map.removeLayer(marker);
        marker = L.marker([lat, lon]).addTo(map);
      }
    }

    function updateBackground(weatherMain) {
      const app = document.getElementById("app");
      app.className = "min-h-screen flex flex-col items-center justify-center p-4 transition-colors duration-500";
      switch (weatherMain.toLowerCase()) {
        case 'clear': app.classList.add('weather-clear'); break;
        case 'clouds': app.classList.add('weather-clouds'); break;
        case 'rain':
        case 'drizzle':
        case 'thunderstorm': app.classList.add('weather-rain'); break;
        case 'snow': app.classList.add('weather-snow'); break;
        default: app.classList.add('weather-default');
      }
    }

    function searchCity() {
      const city = document.getElementById("cityInput").value.trim();
      if (!city) return;

      fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${city},KR&limit=1&appid=${API_KEY}`)
        .then(res => res.json())
        .then(data => {
          if (data.length === 0) {
            alert("도시를 찾을 수 없습니다.");
            return;
          }

          const location = data[0];
          const name_ko = location.local_names?.ko || location.name;
          currentCity = name_ko;
          currentCoords = { lat: location.lat, lon: location.lon };

          getWeatherByCoords(currentCoords.lat, currentCoords.lon, currentCity);
        });
    }

    function getWeatherByCoords(lat, lon, cityLabel) {
      fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&lang=kr&appid=${API_KEY}`)
        .then(res => res.json())
        .then(weatherData => {
          const temp = Math.round(weatherData.main.temp);
          const desc = weatherData.weather[0].description;
          const icon = weatherData.weather[0].icon;
          const main = weatherData.weather[0].main;

          updateBackground(main);
          initMap(lat, lon);

          document.getElementById("weather").innerHTML = `
            <h2 class="text-xl font-semibold">📍 ${cityLabel}
              <button onclick="saveCity()" title="즐겨찾기" class="ml-2">⭐</button>
            </h2>
            <img src="https://openweathermap.org/img/wn/${icon}@2x.png" alt="${desc}" class="mx-auto w-16" />
            <p class="text-lg">${desc}</p>
            <p class="text-lg">🌡️ ${temp}°C</p>
          `;
        });
    }

    document.getElementById("cityInput").addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        searchCity();
      }
    });

    function saveCity() {
      const saved = JSON.parse(localStorage.getItem('cities') || '[]');
      if (!saved.find(c => c.name === currentCity)) {
        saved.push({ name: currentCity, lat: currentCoords.lat, lon: currentCoords.lon });
        localStorage.setItem('cities', JSON.stringify(saved));
        loadSavedCities();
      }
    }

    function deleteCity(name) {
      let saved = JSON.parse(localStorage.getItem('cities') || '[]');
      saved = saved.filter(c => c.name !== name);
      localStorage.setItem('cities', JSON.stringify(saved));
      loadSavedCities();
    }

    function loadSavedCities() {
      const saved = JSON.parse(localStorage.getItem('cities') || '[]');
      const container = document.getElementById("savedCities");
      if (saved.length === 0) {
        container.innerHTML = '';
        return;
      }
      const list = saved.map(c => `
        <div class="flex justify-between bg-gray-100 rounded px-3 py-1">
          <span class="cursor-pointer text-blue-600" onclick="getWeatherByCoords(${c.lat}, ${c.lon}, '${c.name}')">${c.name}</span>
          <button class="text-red-500" onclick="deleteCity('${c.name}')">🗑</button>
        </div>
      `).join('');
      container.innerHTML = `<h3 class="font-semibold">⭐ 즐겨찾기 도시</h3>${list}`;
    }

    window.onload = () => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(pos => {
          const lat = pos.coords.latitude;
          const lon = pos.coords.longitude;
          initMap(lat, lon);
        });
      } else {
        initMap(37.5665, 126.9780);
      }
      loadSavedCities();
    };
  </script>
</body>
</html>
